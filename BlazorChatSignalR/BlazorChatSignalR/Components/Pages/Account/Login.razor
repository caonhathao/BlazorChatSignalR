@page "/"
@using System.ComponentModel.DataAnnotations
<div class="container-form">
	<h1 class="text-center my-4 mx-3">Welcome to<br/> Blazing Chat</h1>
	<div class="row justify-content-center">
		<div class="col-ms-4 mx-3">
			@(message != "" ? message : "")
			<section class="form-container">
				<EditForm Model="loginModel" method="post" OnValidSubmit="LoginAsync" FormName="login">
					<DataAnnotationsValidator />
					<h2 class="text-center mb-4">Login to your account</h2>
					<hr />

					<ValidationSummary class="text-danger" role="alert" />
					<div class="form-floating mb-3">
						<label for="email" class="form-label">Email</label>
						<InputText @bind-Value="loginModel.Email" class="form-control"
								   autocomplete="current-email" aria-required="true" placeholder="Enter your Email" />


						<ValidationMessage For="() => loginModel.Email" class="text-danger" />
					</div>

					<div class="form-floating mb-3">
						<label for="password" class="form-label">Password</label>
						<InputText type="password" @bind-Value="loginModel.Password" class="form-control"
								   autocomplete="current-password" aria-required="true" placeholder="Enter your password" />


						<ValidationMessage For="() => loginModel.Password" class="text-danger" />
					</div>
					<div class=" row d-flex justify-content-around flex-row">
						<button type="submit" class="w-45 btn btn-lg btn-primary">Log in</button>
						<button type="submit" class="w-45 btn btn-lg btn-primary">
							<NavLink style="color:var(--secondary-color);text-decoration:none" href="/Account/Register">Register</NavLink>
						</button>
					</div>
				</EditForm>
			</section>
		</div>
	</div>
</div>
@code {
	string message = "";
	[SupplyParameterFromForm]
	private LoginModel loginModel { get; set; } = new();
	async Task LoginAsync()
	{
		var findUser = await userManager.FindByEmailAsync(loginModel.Email);
		if (findUser == null)
		{
			message = "Sorry, user is not register";
			return;
		}

		var result = await signInManager.CheckPasswordSignInAsync
		(findUser, loginModel.Password, false);
		if (!result.Succeeded)
		{
			message = "Sorry, invalid email/password";
			return;
		}

		await signInManager.PasswordSignInAsync
		(findUser, loginModel.Password, false, false);
		NavManager.NavigateTo("/home", true);
	}
	public class LoginModel
	{
		[Required, EmailAddress]
		public string Email { get; set; } = string.Empty;
		[Required]
		public string Password { get; set; } = string.Empty;

	}
}


